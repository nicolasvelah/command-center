stages:
  - buildForTest
  - test
  - build
  - review
  - staging
  - production

variables:
  npm_config_cache: '$CI_PROJECT_DIR/.npm'
  CYPRESS_CACHE_FOLDER: '$CI_PROJECT_DIR/cache/Cypress'

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .npm
    - cache/Cypress
    - node_modules

install-dependencies:
  image: cypress/base:10
  stage: buildForTest
  script:
    - npm install
  artifacts:
    expire_in: 1hr
    paths:
      - node_modules/
      - npm ci
      - $(npm bin)/print-env CI
      - npm run cy:verify
  cache:
    paths:
      - node_modules/
  only:
    - develop
    - master
    - staging

test-apps:
  image: cypress/browsers:chrome67
  stage: test
  script:
    - npm ci
    - npm run test:e2e:ci
  artifacts:
    expire_in: 1 week
    when: always
    paths:
      - cypress/screenshots
      - cypress/videos
  only:
    - develop
    - master
    - staging

build-app:
  image: node:10.14.2
  stage: build
  variables:
    BUILD_CONFIGURATION: 'production'
  dependencies:
    - install-dependencies
  script:
    - npm run build
  artifacts:
    expire_in: 1hr
    paths:
      - public/
  only:
    - master
    - staging

code_quality:
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    - docker run
      --env SOURCE_CODE="$PWD"
      --volume "$PWD":/code
      --volume /var/run/docker.sock:/var/run/docker.sock
      "registry.gitlab.com/gitlab-org/security-products/codequality:$SP_VERSION" /code
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
  only:
    - branches

review:
  stage: review
  script:
    - command deploy
  environment:
    name: review/$CI_BUILD_REF_NAME
    url: https://$CI_ENVIRONMENT_SLUG.$KUBE_DOMAIN
    on_stop: stop_review
  only:
    - develop
  except:
    - master
    - staging

stop_review:
  stage: review
  variables:
    GIT_STRATEGY: none
  script:
    - command destroy
  environment:
    name: review/$CI_BUILD_REF_NAME
    action: stop
  when: manual
  only:
    - develop
  except:
    - master
    - staging

deploy-staging:
  image: ubuntu:16.04
  stage: staging
  dependencies:
    - build-app
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY_STAGING" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $IP_STAGING >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    #- ssh dev@$IP_STAGING
    #- scp -r ~/.ssh/id_rsa public/ dev@$IP_STAGING:/var/www/cc
    ##- ssh dev@$IP_STAGING "cd /var/www/cc && git checkout master && git pull origin staging && npm install && npm run build && exit"
    - scp -P22 -r public/ dev@$IP_STAGING:/var/www/cc
  environment:
    name: staging
    url: https://cc.it-zam.com
  only:
    - staging

deploy-production:
  image: ubuntu:16.04
  stage: production
  dependencies:
    - build-app
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY_PRODUCTION" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $IP_PRODUCTION >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - ls
  script:
    #- ssh dev@$IP_PRODUCTION
    #- scp -r ~/.ssh/id_rsa public/ dev@$IP_PRODUCTION:/var/www/cc
    ##- ssh dev@$IP_PRODUCTION "cd /var/www/cc && git checkout master && git pull origin staging && npm install && npm run build && exit"
    - scp -P22 -r public/ dev@$IP_PRODUCTION:/var/www/cc
  environment:
    name: production
    url: https://cc.itzam.ec
  only:
    - master
